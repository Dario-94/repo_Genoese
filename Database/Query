select nome, round (abitanti/superficie, 2) from provincia order by abitanti/superficie, 2; --> Estrarre nome e densità abitativa da provincia ordinate per densità abitativa, densità arrotondata di due cifre decimali.

----------------------------------------------------------------------------------------------------------

select concat (nome, '(',sigla,')') from provincia; --> concatenazione di stringhe.

----------------------------------------------------------------------------------------------------------

select concat("Il sig. ",LEFT(nome,1)," ",cognome) FROM utente; --> Estrarre stringhe di tipo "Il sig. nome cognome" da utente.

----------------------------------------------------------------------------------------------------------

select concat_ws(" ","Il sig.",LEFT(nome,1),cognome, "nato il",data_nascita) FROM utente; --> Si specifica uno spazio iniziale.

----------------------------------------------------------------------------------------------------------

select concat_ws(" ","Il sig.",CONCAT(LEFT(nome,1.),"."),cognome, "nato il",data_nascita) FROM utente; --> Viene eliminato così lo spazio tra l'iniziale del nome e il punto.

----------------------------------------------------------------------------------------------------------

SELECT CONCAT(UPPER(LEFT(descrizione,1)),LOWER(SUBSTRING(descrizione,2))) AS "Articoli" FROM articolo limit 10; --> Visualizzare la prima lettera maiuscola e tutte le altre minuscole.

----------------------------------------------------------------------------------------------------------

SELECT nome, abitanti, superficie FROM provincia WHERE (abitanti/superficie) BETWEEN 500 AND 1000; --> Estrae nomi, abitanti, superficie e densità abitativa tra 500 e 1000.

----------------------------------------------------------------------------------------------------------

SELECT nome, sigla FROM provincia WHERE sigla IN("AO", "AT", "PU", "OT", "OG", "FC", "BT", "KR", "VV", "WC"); --> Estrarre nomi e sigla delle provincie di AO, AT, PU, OT, OG, FC, BT, KR, VV, WC.

----------------------------------------------------------------------------------------------------------

SELECT settore, descrizione, quantita*prezzo FROM articolo WHERE (quantita >0) AND (quantita*prezzo NOT BETWEEN 50 AND 2000); --> Estrarre settore, descrizione e valore degli articoli con valore inferiore a 50 euro o superiore a 2000 euro non esauriti.

----------------------------------------------------------------------------------------------------------

SELECT settore, descrizione, quantita, prezzo FROM articolo WHERE settore = "ristorativo"; --> Estrarre settore, descrizione, quantita e prezzo degli articoli del settore ristorativo.

----------------------------------------------------------------------------------------------------------

SELECT settore, descrizione, quantita, prezzo FROM articolo WHERE descrizione LIKE "%LEGNO%"; --> Estrarre da una descrizione tutti gli articoli con la parola "legno"

----------------------------------------------------------------------------------------------------------

SELECT settore, descrizione, quantita, prezzo FROM articolo WHERE descrizione LIKE "%LEGNO%" AND descrizione LIKE "%SCALPELLO%"; --> Estrarre settore, descrizione, quantita e prezzo degli articoli la cui descrizione contiene le parole "legno" e "scalpello".

----------------------------------------------------------------------------------------------------------

SELECT round (abitanti/superficie,2) AS "densità abitativa" FROM provincia LIMIT 10; --> AS corrisponde all'alias dell'operazione.

----------------------------------------------------------------------------------------------------------

SELECT nome, cognome, data_nascita, day(data_nascita) AS "day", month(data_nascita) AS "month", year(data_nascita) AS "year" FROM utente;

----------------------------------------------------------------------------------------------------------

SELECT nome, cognome, data_nascita, day(data_nascita) AS "day", month(data_nascita) AS "month", year(data_nascita) AS "year", dayname (data_nascita) AS "dayname", monthname (data_nascita) AS "monthname" FROM utente WHERE month(data_nascita) =3 AND day(data_nascita) >=21 OR month(data_nascita)=6 and day(data_nascita)<=20 OR (month(data_nascita) between 4 and 5);

----------------------------------------------------------------------------------------------------------

SELECT nome, cognome, data_nascita, day(data_nascita) AS "day", month(data_nascita) AS "month", year(data_nascita) AS "year", dayname (data_nascita) AS "dayname", monthname (data_nascita) AS "monthname", right((data_nascita),5) FROM utente WHERE right((data_nascita),5) BETWEEN "03-21" AND "06-20";

----------------------------------------------------------------------------------------------------------

SELECT nome, cognome, data_nascita, date_format(data_nascita, "%d/%m/%Y") AS "Formato italiano" FROM utente;

----------------------------------------------------------------------------------------------------------

SELECT nome, cognome, data_nascita, timestampdiff(YEAR, data_nascita,CURDATE()) AS "AGE" FROM utente;

----------------------------------------------------------------------------------------------------------

INSERT into giocatore VALUES(NULL, "Aguero", "Sergio Leonel", "1988-06-02", "1.72", "69", "D", "Argentina"); inserire dei valori all'interno di una tabella;

----------------------------------------------------------------------------------------------------------

UPDATE allievo SET login="NSR94", password=MD5("ajeje") WHERE id=10; modificare i dati di una tabella ovvero login e password;

----------------------------------------------------------------------------------------------------------

SELECT regione.nome AS Regione, provincia.nome AS Provincia, provincia.sigla AS sigla_provincia, provincia.abitanti AS abitanti_provincia, provincia.superficie AS superficie_provincia, provincia.comuni FROM regione JOIN provincia ON provincia.regione = regione.id; Estrarre dati di provincie e regioni di appartenenza più sigla e dati geografici.

----------------------------------------------------------------------------------------------------------

Assegnare il proprio giocatore alla relativa squadra: Update giocatore set squadra=.. where id=..

----------------------------------------------------------------------------------------------------------

Estrarre squadra con giocatori o senza giocatori: SELECT squadra.nome AS Squadra, squadra.citta AS Citta, giocatore.nome AS Nome_Giocatore, giocatore.cognome AS Cognome_Giocatore, giocatore.altezza AS Altezza, giocatore.peso AS Peso FROM squadra LEFT JOIN giocatore ON giocatore.squadra = squadra.id ORDER BY Squadra, Cognome_Giocatore;

----------------------------------------------------------------------------------------------------------

Estrarre tutti i giocatori e le squadra dove eventualmente giocano. 
1- usando LEFT JOIN
2- usando RIGHT JOIN:

1-SELECT giocatore.nome AS Nome_Giocatore, giocatore.cognome AS Cognome_Giocatore, squadra.nome AS Nome_Squadra, squadra.citta AS Citta_Squadra FROM giocatore LEFT JOIN squadra ON giocatore.squadra = squadra.id ORDER BY squadra, cognome;

2-SELECT giocatore.nome, giocatore.cognome, squadra.nome, squadra.citta FROM giocatore RIGHT JOIN squadra ON giocatore.squadra = squadra.id;

----------------------------------------------------------------------------------------------------------

Iscrizione ad un corso:
INSERT INTO iscrizione VALUES (NULL, 1, 10, "2015-12-22", NULL);

-----------------------------------------------------------------------------------------------------------

Estrarre la lista delle iscrizioni:
SELECT corso.titolo AS Titolo_Corso, allievo.cognome AS Cognome_Allievo, allievo.nome AS Nome_Allievo, iscrizione.data_iscrizione AS Data_Iscrizione FROM iscrizione JOIN allievo ON iscrizione.allievo = allievo.id JOIN corso ON iscrizione.corso = corso.id;

----------------------------------------------------------------------------------------------------------

Estrarre la lista delle stazioni e dei rispettivi tornelli: 
SELECT  stazione.nome, tornello.numero FROM tornello JOIN stazione ON tornello.stazione = stazione.id;

----------------------------------------------------------------------------------------------------------

Estrarre cognome, nome, date di validità degli abbonamenti:
SELECT utente.cognome AS Cognome, utente.nome AS Nome, abbonamento.dal AS Inizio_validita, abbonamento.al AS Fine_validita FROM abbonamento JOIN utente ON abbonamento.utente = utente.id ORDER BY Cognome;

----------------------------------------------------------------------------------------------------------

Query per il controllo dell'abbonamento:
SELECT COUNT(*) FROM abbonamento WHERE abbonamento.id = 2 and "2014-10-21" between dal and al;

----------------------------------------------------------------------------------------------------------

Numero di accessi dalla stazione XVIII Dicembre:
SELECT count(*) FROM accesso JOIN tornello ON accesso.tornello = tornello.id WHERE tornello.stazione = 12

----------------------------------------------------------------------------------------------------------

Contare gli articoli per settore:
SELECT settore, count(settore) from articolo GROUP BY settore;

----------------------------------------------------------------------------------------------------------

Contare gli articoli per settore. Calcolare anche il valore:
SELECT settore, count(settore) AS Articoli, sum(round(prezzo*quantita,2)) AS Valore from articolo GROUP BY settore ORDER BY Valore;

----------------------------------------------------------------------------------------------------------

Contare gli articoli per settore. Calcolare anche il valore e il valore medio:
SELECT settore, count(settore) AS Articoli, round(sum(prezzo*quantita)) AS Valore, round(sum(quantita*prezzo)/count(*)) AS Media from articolo GROUP BY settore ORDER BY Valore;

----------------------------------------------------------------------------------------------------------

Calcolare:
-numero di province.
-abitanti
-numero di comuni
-superficie
-lista delle sigle
-densita
di ogni regione
SELECT regione.nome AS Regione, count(*) AS Province, sum(provincia.abitanti) AS Abitanti, sum(provincia.comuni) AS Comuni, round(sum(provincia.superficie)) AS Superficie, GROUP_CONCAT(sigla) AS Sigla, round(sum(provincia.abitanti)/sum(provincia.superficie)) AS Densita FROM regione JOIN provincia ON provincia.regione = regione.id GROUP BY regione.id ORDER BY Superficie;


----------------------------------------------------------------------------------------------------------

SELECT utente.cognome AS Cognome, stazione.nome, accesso.dataora AS Dataeora FROM accesso JOIN tornello ON accesso.tornello = tornello.id JOIN stazione ON tornello.stazione = stazione.id JOIN abbonamento ON accesso.abbonamento = abbonamento.id JOIN utente ON abbonamento.utente = utente.id WHERE utente.id = 1 ORDER BY accesso.dataora;

----------------------------------------------------------------------------------------------------------

SELECT utente.cognome AS Cognome, count(*) AS Accesso FROM accesso JOIN tornello ON accesso.tornello = tornello.id JOIN stazione ON tornello.stazione = stazione.id JOIN abbonamento ON accesso.abbonamento = abbonamento.id JOIN utente ON abbonamento.utente = utente.id WHERE accesso.esito = 0 GROUP BY utente.id;

----------------------------------------------------------------------------------------------------------

Estrarre il numero di passaggi epr ogni ora di natale 2014:
SELECT hour(dataora) AS Ore, count(*) AS Accessi FROM accesso WHERE DATE(dataora) = "2014-12-25" GROUP BY Ore;

---------------------------------------------------------------------------------------------------------

Estrarre il numero di passaggi per ogni anno e mese
SELECT year(dataora) AS Anno, month(dataora) AS Mese, count(*) AS Accessi FROM accesso GROUP BY Anno, Mese;

---------------------------------------------------------------------------------------------------------

Etrarre il numero di passaggi per ogni ora specificando quanti sono gli accessi positivi e quanti quelli negativi
SELECT hour(dataora) AS Ore, count(*) AS Accessi, sum(esito) AS Granted, sum(not esito) AS Denied FROM accesso GROUP BY Ore;

---------------------------------------------------------------------------------------------------------

Estrarre:
-nome della stazione,
-numero del tornello,
-numero di passaggi:
SELECT stazione.nome AS Stazione, tornello.numero AS Tornello, count(*) FROM accesso JOIN tornello ON accesso.tornello = tornello.id JOIN stazione ON tornello.stazione = stazione.id GROUP BY stazione.id, tornello.id;

---------------------------------------------------------------------------------------------------------

SOCIAL NETWORK
-utente
-post
-media (0 + per post, con descrizione)
-FANQ ai post(max 1 per utente)









